@model Services.ViewModels.UserInfoViewModel

<head>
    <link rel="stylesheet" href="~/css/chat.css" asp-append-version="true" />
    <script src="https://cdn.jsdelivr.net/npm/showdown/dist/showdown.min.js"></script>
    <link rel="stylesheet" href="~/css/signup.css" asp-append-version="true" />
    <input type="hidden" id="userSecretId" value="@Model.Sid" />
</head>

<section style="z-index: -100;">
    <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span> <span></span>
</section>

    <div class="container">
    <div id="Button" class="fas fa-fire"></div>
</div>
<div class="chat-holder-buttons">
    <button href="#"><span class="fas fa-heart"></span></button>
    <button disabled href="#"><span class="fas fa-hourglass-half"></span></button>
    <button href="#"><span class="fas fa-spoon"></span></button>
    <button  href="#"><span class="fas fa-asterisk"></span></button>
</div>

<canvas></canvas>

<div class="previous-bloodworks chat-section" style="display:none;">
    @if (Model.Bloodworks != null)
    {
        @foreach (var bloodwork in Model.Bloodworks.OrderByDescending(b => b.BloodTests.First().BloodworkDate))
        {
            <div class="bloodwork-item">
                <h4>Bloodwork recorded on @bloodwork.BloodTests.First().BloodworkDate.ToShortDateString()</h4>
                @foreach (var bloodTest in bloodwork.BloodTests)
                {
                    <div>
                        Talk about:
                        <h5>Submission Date: @bloodTest.SubmissionDate.ToShortDateString()</h5>
                        <button class="talk-bloodwork-btn" data-bloodwork-id="@bloodwork.Id">
                            Start Chat
                        </button>
                        @foreach(var t in bloodTest.Test)
                        {
                            <div style="display: none;">
                            @t.TestName, @t.Result, @t.Grade
                            </div>
                        }
                    </div>
                }
            </div>
        }
    }
</div>

<div style="display: none;">
    Chats #:
    <input id="currentChatId" value="0" />
</div>

<div id="content">
    <div class="input-group" style="display: none;">
        <div class="input-group-text"></div>
        <input type="date" value="@DateTime.Now.ToString("yyyy-MM-dd")"
               class="form-control"
               id="submissionDate"
               placeholder="Date of Test" />
    </div>
</div>
<div class="chat-holder">
    <body>
        <script rel="javascript" src="~/js/chatbuttons.js" asp-append-version="true"></script>
        <script rel="javascript" src="~/js/chat.js" asp-append-version="true"></script>
        <script rel="javascript" src="~/js/mealchat.js" asp-append-version="true"></script>
        <script rel="javascript" src="~/js/bloodworkchat.js" asp-append-version="true"></script>
        <script rel="javascript" src="~/js/workoutchat.js" asp-append-version="true"></script>

        <div class="chat-container">
            <div id="chatOutput" class="output">
                <div class="diet-interactions chat-section" style="display:none;">
                    <button id="generateMealsButton" onclick="generateMeals()">Generate Meals</button>
                    <div id="generatedMeals" class="generated-meals-list"></div>
                    <div>
                        @if (Model.Allergies != null)
                        {
                            foreach (var all in Model.Allergies)
                            {
                                <div style="display: none;">@all.ToString()</div>
                            }
                        }
                        @if (Model.Bloodworks != null)
                        {
                            foreach (var bw in Model.Bloodworks)
                            {
                                foreach(var bt in bw.BloodTests)
                                {
                                    var i = 1;
                                    <div style="display: none;">Most Recent Bloodwork:</div>
                                    foreach(var bb in bt.Test)
                                    {
                                        <div style="display: none;">Test @i : @bb.TestName</div>
                                        <div style="display: none;">Result @i : @bb.Result</div>
                                        i++;
                                    }
                                }
                            }
                        }
                    </div>
                </div>

                <div class="workout-interactions chat-section" style="display:none;">
                    <button id="generateWorkoutsButton" onclick="generateWorkouts()">Generate Workouts</button>
                    <div id="generatedWorkouts" class="generated-workouts-list"></div>
                </div>
            </div>
           
            <form id="promptForm" class="input-form">
                <textarea id="promptInput" placeholder="Ask 'TODO: Type of {question}' a Question..." required></textarea>
                <button type="submit" id="sendButton" class="btn btn-primary">
                    <span class="spinner-border spinner-border-sm" aria-hidden="true" style="display: none;" id="spinner"></span>
                    <span id="buttonText">Send</span>
                </button>
            </form>
        </div>
        <button style="display: none;" id="saveChatButton" class="btn btn-secondary">Save Chat</button>
    </body>
</div>

<div class="previous-chats">
    <div class="legend">
        <a class="bloodwork-chat">Red: Bloodwork Chat</a>
        <a class="diet-chat">Blue: Diet Chat</a>
    </div>
    @if (Model.Chats != null)
    {
        <div class="chats">
            @foreach (var chat in Model.Chats)
            {
                if (chat.ChatTopic == "bloodwork")
                {
                    <div class="chat-title">
                        <a style="color: red;" class="load-chat bloodwork-chat" data-chat-id="@chat.Id">
                            @chat.ChatDate, @chat.ChatTopic
                        </a>
                    </div>
                }

                if (chat.ChatTopic == "diet")
                {
                    <div class="chat-title">
                        <a style="color: #3498db;" class="load-chat diet-chat" data-chat-id="@chat.Id">
                            @chat.ChatDate, @chat.ChatTopic
                        </a>
                    </div>
                }
            }
        </div>
    }
</div>

<div class="input-group" style="display: none; position: absolute;">
    <div class="input-group-text"></div>
    <input type="date" value="@DateTime.Now.ToString("yyyy-MM-dd")"
           class="form-control"
           id="submissionDate"
           placeholder="Date of Test" />
</div>
<script>
    function displayErrorMessage(message) {
        const errorMessage = document.createElement('div');
        errorMessage.className = 'alert alert-danger';
        errorMessage.setAttribute('role', 'alert');
        errorMessage.innerHTML = message;
        document.getElementById('chatOutput').appendChild(errorMessage);
    }

    function resetUI() {
        const inputField = document.getElementById('promptInput');

        spinner.style.display = 'none';
        buttonText.textContent = 'Send';
        sendButton.disabled = false;
        sendButton.style.backgroundColor = 'grey';
        inputField.disabled = false;
    }

    function saveChat(chatId, messages, topic) {
        messages.Id = chatId;
        fetch(`/api/LetsChat/SaveChats`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ Id: chatId, ChatTopic: topic, messages: messages })
        })
            .then(response => response.json())
            .then(data => {
                console.log('Chat saved:', data);

                document.getElementById('currentChatId').value = data.thisChatId;
            })
            .catch(error => {
                console.error('Error saving chat:', error);
            });
    }

    $(document).ready(function () {
        const userChatForm = document.getElementById('promptForm');
        userChatForm.style.display = 'none';
    });

    document.getElementById('promptForm').addEventListener('submit', function (event) {

        isRunning = true;
        event.preventDefault();
        const inputField = document.getElementById('promptInput');
        const prompt = inputField.value;

        const spinner = document.getElementById('spinner');
        const buttonText = document.getElementById('buttonText');
        const sendButton = document.getElementById('sendButton');

        inputField.value = '';
        inputField.style.height = '50px';
        inputField.disabled = true;
        spinner.style.display = 'inline-block';
        spinner.style.color = '#349d34';
        sendButton.style.backgroundColor = '#0f540f';
        buttonText.textContent = 'Loading...';
        sendButton.disabled = true;

        // Display user message
        const userMessage = document.createElement('div');
        userMessage.className = 'message user-message';
        userMessage.textContent = prompt;
        document.getElementById('chatOutput').appendChild(userMessage);

        messages.push({ role: 'user', content: prompt });

        fetch('/api/LetsChat/GetChatResponse', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ messages: messages })
        })
            .then(response => {
                if (!response.ok) {
                    return response.text().then(text => {
                        try {
                            const errorData = JSON.parse(text);
                            const apiErrorMessage = errorData.error && errorData.error.message ? errorData.error.message : "Unknown API error occurred.";
                            throw new Error(`Error from API: ${apiErrorMessage}`);
                        } catch (e) {
                            throw new Error(`Non-JSON Error from API: ${text}`);
                        }
                    });
                }
                return response.json();
            })
            .then(data => {
                try {
                    messages.push({ role: 'system', content: data.message });

                    const converter = new showdown.Converter();
                    const htmlResponse = converter.makeHtml(data.message);

                    const responseContainer = document.createElement('div');
                    responseContainer.className = 'message bot-message';
                    responseContainer.innerHTML = `<div class="response-content">${htmlResponse}</div>`;

                    resetUI();
                    if (currentChatType === 'Diet') {
                        displayMealsWithButtons(data);
                    } else {
                        document.getElementById('chatOutput').appendChild(responseContainer);
                    }
                } catch (synchronousError) {
                    displayErrorMessage(`Error: <strong>${synchronousError.message}</strong>`);
                    resetUI();
                }
            })
            .catch(error => {
                console.error('Caught in catch:', error);  // Log error details
                displayErrorMessage(`Error: <strong>${error.message}</strong>`);
                resetUI();
            });
    });

    function runSaveChat() {
        if (isRunning) {
            var chatIdThis = document.getElementById('currentChatId').value;
            let topic = currentChatType;
            saveChat(chatIdThis, messages, topic);
        }
    }

    document.querySelectorAll('.load-chat').forEach(link => {
        link.addEventListener('click', function () {
            const chatId = this.getAttribute('data-chat-id');
            let chatOptionButton = document.getElementById('Button');
            chatOptionButton.style.transition = 'top 0.5s ease, left 0.5s ease';
            chatOptionButton.style.position = 'absolute';
            chatOptionButton.style.top = '15%';
            chatOptionButton.style.left = '10%';


            fetch(`/api/LetsChat/${chatId}`)
                .then(response => response.json())
                .then(chat => {
                    const chatOutput = document.getElementById('chatOutput');

                    // Clear the existing messages
                    chatOutput.innerHTML = '';
                    messages = [];

                    document.getElementById('currentChatId').value = chat.Id;
                    // Loop through and display the messages
                    chat.Messages.forEach(message => {
                        const messageDiv = document.createElement('div');
                        messageDiv.className = message.role === 'system' ? 'message bot-message' : 'message user-message';
                        messageDiv.innerHTML = message.content;
                        messages.push({ role: message.role, content: message.content });
                        const converter = new showdown.Converter();
                        const htmlResponse = converter.makeHtml(message.content);

                        const responseContainer = document.createElement('div');
                        responseContainer.className = 'message bot-message';
                        responseContainer.innerHTML = `<div class="response-content">${htmlResponse}</div>`;

                        resetUI();
                        document.getElementById('chatOutput').appendChild(responseContainer);
                    });
                    let contentDiv = document.getElementById('content');

                    contentDiv.innerHTML = '';

                    let newDiv = document.createElement('div');

                    contentDiv.appendChild(newDiv);
                    const userChatForm = document.getElementById('promptForm');
                    userChatForm.style.display = 'flex';
                    const outputForm = document.getElementById('chatOutput');
                    outputForm.style.overflow = 'scroll';
                })
                .catch(error => {
                    console.error('Error loading chat:', error);
                });
        });
    });

    let currentChatId = 0;  // Use 'let' to allow reassignment
    document.addEventListener('DOMContentLoaded', function () {
        currentChatId = document.getElementById('currentChatId').value;
        console.log(currentChatId);
        setInterval(runSaveChat, 10000);
    });
</script>

        <style>
            .load-chat{
                cursor: pointer;
            }
        </style>