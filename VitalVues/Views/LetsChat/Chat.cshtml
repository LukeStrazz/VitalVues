@model Services.ViewModels.UserInfoViewModel

<head>
    <link rel="stylesheet" href="~/css/chat.css" asp-append-version="true" />
    <script src="https://cdn.jsdelivr.net/npm/showdown/dist/showdown.min.js"></script>
</head>

<div class="container">
    <div id="Button" class="fas fa-fire"></div>
</div>
<div class="chat-holder-buttons">
    <button href="#"><span class="fas fa-heart"></span></button>
    <button disabled href="#"><span class="fas fa-hourglass-half"></span></button>
    <button href="#"><span class="fas fa-spoon"></span></button>
    <button disabled href="#"><span class="fas fa-asterisk"></span></button>
</div>

<canvas></canvas>

<div class="previous-bloodworks chat-section" style="display:none;">
    @if (Model.Bloodworks != null)
    {
        @foreach (var bloodwork in Model.Bloodworks)
        {
            <div class="bloodwork-item">
                <h4>Bloodwork recorded on @bloodwork.BloodTests.First().BloodworkDate.ToShortDateString()</h4>
                @foreach (var bloodTest in bloodwork.BloodTests)
                {
                    <div>
                        Talk about:
                        <h5>Submission Date: @bloodTest.SubmissionDate.ToShortDateString()</h5>
                        <button class="talk-bloodwork-btn" data-bloodwork-id="@bloodwork.Id">
                            Start Chat
                        </button>
                        @foreach(var t in bloodTest.Test)
                        {
                            <div style="display: none;">
                            @t.TestName, @t.Result, @t.Grade
                            </div>
                        }
                    </div>
                }
            </div>
        }
    }
</div>
<div class="diet-interactions chat-section" style="display:none;">
    <button id="generateMealsButton">Generate Meals</button>
    <div id="generatedMeals" class="generated-meals-list"></div>
    <div>
        @if(Model.Allergies != null)
        {
            foreach(var all in Model.Allergies)
            {
                <div>@all</div>
            }
        }
    </div>
</div>

<div style="display: none;">
    Chats #:
    <input id="currentChatId" value="0" />
</div>

<div id="content">
    <div class="input-group" style="display: none;">
        <div class="input-group-text"></div>
        <input type="date" value="@DateTime.Now.ToString("yyyy-MM-dd")"
               class="form-control"
               id="submissionDate"
               placeholder="Date of Test" />
    </div>
</div>
<div class="chat-holder">
    <body>
        <script rel="javascript" src="~/js/chatbuttons.js" asp-append-version="true"></script>
        <script rel="javascript" src="~/js/mealchat.js" asp-append-version="true"></script>

        <div class="chat-container">
            <div id="chatOutput" class="output"></div>
            <form id="promptForm" class="input-form">
                <textarea id="promptInput" placeholder="Ask 'TODO: Type of {question}' a Question..." required></textarea>
                <button type="submit" id="sendButton" class="btn btn-primary">
                    <span class="spinner-border spinner-border-sm" aria-hidden="true" style="display: none;" id="spinner"></span>
                    <span id="buttonText">Send</span>
                </button>
            </form>
        </div>
        <button style="display: none;" id="saveChatButton" class="btn btn-secondary">Save Chat</button>
    </body>
</div>

<div class="previous-chats">
    <div class="legend">
        <a class="bloodwork-chat">Red: Bloodwork Chat</a>
        <a class="diet-chat">Blue: Diet Chat</a>
    </div>
    @if (Model.Chats != null)
    {
        <div class="chats">
            @foreach (var chat in Model.Chats)
            {
                if (chat.ChatTopic == "bloodwork")
                {
                    <div class="chat-title">
                        <a style="color: red;" class="load-chat bloodwork-chat" data-chat-id="@chat.Id">
                            @chat.ChatDate, @chat.ChatTopic
                        </a>
                    </div>
                }

                if (chat.ChatTopic == "diet")
                {
                    <div class="chat-title">
                        <a style="color: #3498db;" class="load-chat diet-chat" data-chat-id="@chat.Id">
                            @chat.ChatDate, @chat.ChatTopic
                        </a>
                    </div>
                }
            }
        </div>
    }
</div>

<div class="input-group" style="display: none; position: absolute;">
    <div class="input-group-text"></div>
    <input type="date" value="@DateTime.Now.ToString("yyyy-MM-dd")"
           class="form-control"
           id="submissionDate"
           placeholder="Date of Test" />
</div>
<script>
    var canvas = $('canvas')[0];
    var context = canvas.getContext('2d');

    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    var Projectile;
    var State = false;
    var Explode = false;
    var Collapse = false;
    var Particles = [];

    let messages = []; // Store chat history here

    var colors = ["#1abc9c", "#2ecc71", "#3498db", "#9b59b6", "#9b59b6", "#f1c40f", "#e67e22", "#e74c3c"];

    let currentChatType = '';

    let isRunning = false;

    document.querySelectorAll('.chat-holder-buttons button').forEach(button => {
        button.addEventListener('click', function () {
            let buttonType = this.querySelector('span').classList;
            let contentDiv = document.getElementById('content');

            contentDiv.innerHTML = '';

            let newDiv = document.createElement('div');

            switch (true) {
                case buttonType.contains('fa-heart'):
                    newDiv.innerHTML = `<h2>Bloodwork Chat</h2><p></p>`;
                    document.querySelector('.previous-bloodworks').style.display = 'flex';
                    currentChatType = 'bloodwork';
                    break;
                case buttonType.contains('fa-hourglass-half'):
                    newDiv.innerHTML = `<h2>Fasting Chat</h2><p></p>`;
                    currentChatType = 'fasting';
                    break;
                case buttonType.contains('fa-spoon'):
                    newDiv.innerHTML = `<h2>Diet Chat</h2><p></p>`;
                    document.querySelector('.diet-interactions').style.display = 'flex';
                    currentChatType = 'diet';
                    break;
                case buttonType.contains('fa-asterisk'):
                    newDiv.innerHTML = `<h2>Workout Chat</h2><p></p>`;
                    currentChatType = 'workout';
                    break;
                default:
                    newDiv.innerHTML = `<h2>Error</h2><p>Unhandled</p>`;
            }

            $('#Button').click();

            contentDiv.appendChild(newDiv);
            const userChatForm = document.getElementById('promptForm');
            userChatForm.style.display = 'flex';
            const outputForm = document.getElementById('chatOutput');
            outputForm.style.overflow = 'scroll';
        });
    });

    document.querySelectorAll('.load-chat').forEach(link => {
        link.addEventListener('click', function () {
            const chatId = this.getAttribute('data-chat-id');
            let chatOptionButton = document.getElementById('Button');
            chatOptionButton.style.transition = 'top 0.5s ease, left 0.5s ease';
            chatOptionButton.style.position = 'absolute';
            chatOptionButton.style.top = '15%';
            chatOptionButton.style.left = '10%';


            fetch(`/api/LetsChat/${chatId}`)
                .then(response => response.json())
                .then(chat => {
                    const chatOutput = document.getElementById('chatOutput');

                    // Clear the existing messages
                    chatOutput.innerHTML = '';
                    messages = [];

                    document.getElementById('currentChatId').value = chat.Id;
                    // Loop through and display the messages
                    chat.Messages.forEach(message => {
                        const messageDiv = document.createElement('div');
                        messageDiv.className = message.role === 'system' ? 'message bot-message' : 'message user-message';
                        messageDiv.innerHTML = message.content;
                        messages.push({ role: message.role, content: message.content });
                        const converter = new showdown.Converter();
                        const htmlResponse = converter.makeHtml(message.content);

                        const responseContainer = document.createElement('div');
                        responseContainer.className = 'message bot-message';
                        responseContainer.innerHTML = `<div class="response-content">${htmlResponse}</div>`;

                        resetUI();
                        document.getElementById('chatOutput').appendChild(responseContainer);
                    });
                    let contentDiv = document.getElementById('content');

                    contentDiv.innerHTML = '';

                    let newDiv = document.createElement('div');

                    contentDiv.appendChild(newDiv);
                    const userChatForm = document.getElementById('promptForm');
                    userChatForm.style.display = 'flex';
                    const outputForm = document.getElementById('chatOutput');
                    outputForm.style.overflow = 'scroll';
                })
                .catch(error => {
                    console.error('Error loading chat:', error);
                });
        });
    });



    let currentChatId = 0;  // Use 'let' to allow reassignment
    document.addEventListener('DOMContentLoaded', function () {
        currentChatId = document.getElementById('currentChatId').value;
        console.log(currentChatId);
        setInterval(runSaveChat, 10000);
    });



    document.querySelectorAll('.talk-bloodwork-btn').forEach(button => {
        button.addEventListener('click', function () {
            isRunning = true;
            document.querySelector('.previous-bloodworks').style.display = 'none';
            const inputField = document.getElementById('promptInput');
            const spinner = document.getElementById('spinner');
            const buttonText = document.getElementById('buttonText');
            const sendButton = document.getElementById('sendButton');

            inputField.value = '';
            inputField.style.height = '50px';
            inputField.disabled = true;
            spinner.style.display = 'inline-block';
            spinner.style.color = 'darkgoldenrod';
            sendButton.style.backgroundColor = 'goldenrod';
            buttonText.textContent = 'Loading...';
            sendButton.disabled = true;
            const bloodworkId = this.getAttribute('data-bloodwork-id');

            let allTestResults = "";
            const bloodworkItem = this.closest('.bloodwork-item');

            bloodworkItem.querySelectorAll('div').forEach(testDiv => {
                const testDetails = testDiv.textContent.trim();
                if (testDetails) {
                    allTestResults += testDetails + "\n"; 
                }
            });
            const prompt = `Let's talk about bloodwork. Here is a list of all test results, separated by new lines. Now provide a detailed report on the bloodwork:\n${allTestResults}`;
            const userMessage = document.createElement('div');
            userMessage.className = 'message user-message';
            userMessage.textContent = prompt;
            document.getElementById('chatOutput').appendChild(userMessage);

            messages.push({ role: 'user', content: prompt });

            fetch('/api/LetsChat/GetChatResponse', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ messages: messages })
            })
                .then(response => response.json())
                .then(data => {
                    try {
                        messages.push({ role: 'system', content: data.message });

                        const chatMessages = document.querySelectorAll('#chatOutput .message');
                        chatMessages.forEach(messageElement => {
                            const role = messageElement.classList.contains('bot-message') ? 'system' : 'user';
                            const content = messageElement.textContent;
                            messages.push({ role: role, content: content });
                        });

                        const converter = new showdown.Converter();
                        const htmlResponse = converter.makeHtml(data.message);

                        const responseContainer = document.createElement('div');
                        responseContainer.className = 'message bot-message';
                        responseContainer.innerHTML = `<div class="response-content">${htmlResponse}</div>`;

                        resetUI();
                        document.getElementById('chatOutput').appendChild(responseContainer);
                     

                    } catch (synchronousError) {
                        displayErrorMessage(`Error: <strong>${synchronousError.message}</strong>`);
                        resetUI();
                    } 
                })
                .catch(error => {
                    console.error('Error:', error); 
                    resetUI();
                });
        });
    });


    function saveChat(chatId, messages, topic) {
        messages.Id = chatId;
        fetch(`/api/LetsChat/SaveChats`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ Id: chatId, ChatTopic: topic, messages: messages })
        })
        .then(response => response.json())
        .then(data => {
            console.log('Chat saved:', data); 

            document.getElementById('currentChatId').value = data.thisChatId;
        })
        .catch(error => {
            console.error('Error saving chat:', error);
        });
    }

    $(document).ready(function () {
        const userChatForm = document.getElementById('promptForm');
        userChatForm.style.display = 'none';
    });

    document.getElementById('promptInput').addEventListener('input', function () {
        this.style.height = 'auto'; // Reset the height
        this.style.height = Math.min(this.scrollHeight, 150) + 'px'; // Set height based on content, up to a max
    });

    document.getElementById('promptForm').addEventListener('submit', function (event) {

        isRunning = true;
        event.preventDefault();
        const inputField = document.getElementById('promptInput');
        const prompt = inputField.value;

        const spinner = document.getElementById('spinner');
        const buttonText = document.getElementById('buttonText');
        const sendButton = document.getElementById('sendButton');

        inputField.value = '';
        inputField.style.height = '50px';
        inputField.disabled = true;
        spinner.style.display = 'inline-block';
        spinner.style.color = 'darkgoldenrod';
        sendButton.style.backgroundColor = 'goldenrod';
        buttonText.textContent = 'Loading...';
        sendButton.disabled = true;

        // Display user message
        const userMessage = document.createElement('div');
        userMessage.className = 'message user-message';
        userMessage.textContent = prompt;
        document.getElementById('chatOutput').appendChild(userMessage);

        messages.push({ role: 'user', content: prompt });

        fetch('/api/LetsChat/GetChatResponse', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ messages: messages })
        })
            .then(response => {
                if (!response.ok) {
                    return response.text().then(text => {
                        try {
                            const errorData = JSON.parse(text);
                            const apiErrorMessage = errorData.error && errorData.error.message ? errorData.error.message : "Unknown API error occurred.";
                            throw new Error(`Error from API: ${apiErrorMessage}`);
                        } catch (e) {
                            throw new Error(`Non-JSON Error from API: ${text}`);
                        }
                    });
                }
                return response.json();
            })
            .then(data => {
                try {
                    messages.push({ role: 'system', content: data.message });

                    const converter = new showdown.Converter();
                    const htmlResponse = converter.makeHtml(data.message);

                    const responseContainer = document.createElement('div');
                    responseContainer.className = 'message bot-message';
                    responseContainer.innerHTML = `<div class="response-content">${htmlResponse}</div>`;

                    resetUI();
                    if (currentChatType === 'Diet') {
                        displayMealsWithButtons(data);
                    } else {
                        document.getElementById('chatOutput').appendChild(responseContainer);
                    }
                } catch (synchronousError) {
                    displayErrorMessage(`Error: <strong>${synchronousError.message}</strong>`);
                    resetUI();
                }
            })
            .catch(error => {
                console.error('Caught in catch:', error);  // Log error details
                displayErrorMessage(`Error: <strong>${error.message}</strong>`);
                resetUI();
            });
    });


    function runSaveChat() {
        if (isRunning) {
            var chatIdThis = document.getElementById('currentChatId').value;
            let topic = currentChatType;
            saveChat(chatIdThis, messages, topic);
        }
    }

    function displayMealsWithButtons(data) {
        const chatOutput = document.getElementById('chatOutput');
        const lines = data.message.split(',');

        lines.forEach(line => {
            const div = document.createElement('div');
            div.classList.add('meal-line');
            div.classList.add('message');
            div.classList.add('bot-message');

            if (line.includes('Breakfast') || line.includes('Lunch') || line.includes('Dinner') || line.includes('Snack')) {
                div.textContent = line;

                const addButton = document.createElement('button');
                addButton.textContent = 'Add to meals';
                addButton.onclick = function () {
                    if (currentChatType === 'Diet') { 
                        addToMealsTable(line);
                    } else {
                        alert('You can only add meals while in the Diet Chat.');
                    }
                };

                div.appendChild(addButton);
            } else {
                div.textContent = line;
            }

            chatOutput.appendChild(div);
        });
    }

    function addToMealsTable(mealText) {
        const mealParts = mealText.split(':');
        const mealType = mealParts[0].trim();
        const mealDescription = mealParts[1].trim();

        const mealData = {
            mealType: mealType,
            mealDescription: mealDescription
        };

        $.ajax({
            url: '/api/Meals/AddMeal',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(mealData),
            success: function (response) {
                alert('Meal added successfully!');
            },
            error: function (error) {
                alert('Error adding meal.');
            }
        });
    }

    function displayErrorMessage(message) {
        const errorMessage = document.createElement('div');
        errorMessage.className = 'alert alert-danger';
        errorMessage.setAttribute('role', 'alert');
        errorMessage.innerHTML = message;
        document.getElementById('chatOutput').appendChild(errorMessage);
    }

    function resetUI() {
        const inputField = document.getElementById('promptInput');

        spinner.style.display = 'none';
        buttonText.textContent = 'Send';
        sendButton.disabled = false;
        sendButton.style.backgroundColor = 'gold';
        inputField.disabled = false;
    }
</script>

        <style>
            .load-chat{
                cursor: pointer;
            }
        </style>