@model Services.ViewModels.UserInfoViewModel
@{
    ViewData["Title"] = "User Profile";
}

<head>
    <title>Dropdown Example</title>
    <link rel="stylesheet" href="~/css/journal.css" asp-append-version="true" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
        <script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.9.2/html2pdf.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
</head>

    <section>
        <input type="hidden" id="userSecretId" value="@Model.Sid" />
        <div class="row mb-5">
            <div class="col-sm-10 d-flex flex-column">

                <div>
                    <h1 id="title-journal-h1">JOURNALS</h1>
                    <p>
                        Hi @Model.FirstName, welcome to the journal page. Here you can create journals by adding desired bloodworks,
                         workouts, chats, and goals that you have in your account. You will be able to get a PDF of each journal.
                          This functionality will be implemented in the future!
                    </p>
                </div>

                <div class="totals-container mt-4" style="text-align: center;">

                    <div class="total-item">
                        <h4>
                            Workouts Created:
                            @{
                                int workoutCount = 0;
                                if (Model.Workouts != null)
                                {
                                    foreach (var workout in Model.Workouts)
                                    {
                                        workoutCount++;
                                    }
                                }
                            }
                            <span id="workoutsTotal">@workoutCount</span>
                        </h4>
                    </div>

                    <div class="total-item">
                        <h4>
                            Goals Created:
                            @{
                                int goalCount = 0;
                                if (Model.Goals != null)
                                {
                                    foreach (var goal in Model.Goals)
                                    {
                                        goalCount++;
                                    }
                                }
                            }
                            <span id="goalsTotal">@goalCount</span>
                        </h4>
                    </div>

                    <div class="total-item">
                        <h4>
                            Bloodworks Submitted:
                            @{
                                int bloodworkCount = 0;
                                if (Model.Bloodworks != null)
                                {
                                    foreach (var bloodwork in Model.Bloodworks)
                                    {
                                        bloodworkCount++;
                                    }
                                }
                            }
                            <span id="bloodworksTotal">@bloodworkCount</span>
                        </h4>
                    </div>

                    <div class="total-item">
                        <h4>
                            Has Chatted:
                            @{
                                int chatCount = 0;
                                if (Model.Chats != null)
                                {
                                    foreach (var chat in Model.Chats)
                                    {
                                        chatCount++;
                                    }
                                }
                            }
                            <span id="chatsTotal">@chatCount</span>
                        </h4>
                    </div>
                    <div></div>

                </div>
            </div>

            <div class="col-sm-2 d-flex flex-column align-items-center justify-content-center">
                <div class="image-and-journals">
                    <div class="add-image">
                        <img src="~/images/goals/plus-sign.png"
                             class="round-image"
                             onclick="showJournalModel();">
                    </div>

                    <hr class="rounded">
                    <div class="journals-container">
                        @if (Model.Journals != null && Model.Journals.Any())
                        {
                            foreach (var journal in Model.Journals)
                            {
                                @if(!journal.Resolved) {
                                <div class="stack-item mb-3 journal-item" data-journal-id="@journal.JournalId" onclick="viewJournalDetails(@journal.JournalId)">
                                    <h5 id="journal-view-title-h5">@journal.Title</h5>
                                    <input type="hidden" id="" value="">
                                    <small id="journal-view-date-small">@journal.JournalDate.ToString("MM/dd/yyyy")</small>
                                </div>
                                }
                            }
                        }
                        else
                        {
                            <div class="stack-item" >
                                No Journals Available
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <div class="modal fade" id="showJournalModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            
            <div class="modal-header">
                <div class="d-flex flex-column w-100">

                    <div class="d-flex justify-content-between">
                        
                        <h4 class="modal-title" id="modal-journal-title" style="text-align: center;">Journal Title</h4>
                        <p><strong>Date:</strong> <span id="modal-journal-date"></span></p>
                    </div>
                </div>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
           
            <div class="modal-body">

                <h5>Workouts</h5>
                <ul id="modal-journal-workouts"></ul>
                
                <h5>Blood Tests</h5>
                <ul id="modal-journal-bloodtests"></ul>
                
                <h5>Goals</h5>
                <ul id="modal-journal-goals"></ul>
                
                <h5>Summary</h5>
                <div id="modal-journal-content">
                    
                    <p><strong>Content:</strong> <span id="modal-journal-description"></span></p>
                </div>
            </div>                  
            
            <div class="modal-footer">
                <button type="button" id="generatePdfButton" value="0" class="btn btn-outline-warning"">PDF</button>
                <button type="button" id="deleteButton" value="0" class="btn btn-outline-danger btn-delete">Delete</button>
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
        </div>

        <div class="modal fade" id="createJournalModal" tabindex="-1" aria-labelledby="createJournalModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">

                    <div class="modal-header">
                        <h4 class="modal-title" id="createJournalModalLabel">Create Journal</h4>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>

                    <div class="modal-body">
                        <form>
                            <div class="mb-3">
                                <input type="text" class="form-control" id="journalTitle" placeholder="Please enter a title for the journal.">
                            </div>

                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <div class="dropdown">
                                        <button class="btn btn-secondary dropdown-toggle w-100" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown" aria-expanded="false">
                                            Bloodtests
                                        </button>
                                        <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton1" id="bloodtestDropdown">

                    
                                            @if (Model.Bloodworks != null && Model.Bloodworks.Any())
                                            {
                                                foreach (var bw in Model.Bloodworks)
                                                {
                                                    if (bw.BloodTests != null && bw.BloodTests.Any())
                                                    {
                                                        foreach (var bt in bw.BloodTests)
                                                        {
                                                            <li style="padding-left: 15px;">
                                                                <div class="form-check px-3">
                                                                    <input class="form-check-input" type="checkbox" value="@bt.Id" id="bloodtest-@bt.Id">
                                                                    <label class="form-check-label" for="bloodtest-@bt.Id">Date: @bt.SubmissionDate.ToString("MM/dd/yyyy")</label>
                                                                </div>
                                                            </li>
                                                        }
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                <li class="px-3">No Bloodtests Available</li>
                                            }

                                        </ul>
                                    </div>
                                </div>

                                <div class="col-md-6">
                                    <div class="dropdown">
                                        <button class="btn btn-secondary dropdown-toggle w-100" type="button" id="dropdownMenuButton2" data-bs-toggle="dropdown" aria-expanded="false">
                                            Workouts
                                        </button>
                                        <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton2" id="workoutDropdown">

                                            @if (Model.Workouts?.Any() == true)
                                            {
                                                foreach (var wo in Model.Workouts)
                                                {
                                                    <li style="padding-left: 15px;">
                                                        <div class="form-check px-3">
                                                            <input class="form-check-input" type="checkbox" name="SelectedWorkouts" value="@wo.WorkoutId" id="workout-@wo.WorkoutId">
                                                            <label class="form-check-label" for="workout-@wo.WorkoutId">@wo.Day - @wo.SubType</label>
                                                        </div>
                                                    </li>
                                                }
                                            }
                                            else
                                            {
                                                <li class="px-3">No Workouts Available</li>
                                            }

                                        </ul>
                                    </div>
                                </div>
                            </div>

                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <div class="dropdown">
                                        <button class="btn btn-secondary dropdown-toggle w-100" type="button" id="dropdownMenuButton3" data-bs-toggle="dropdown" aria-expanded="false">
                                            Goals
                                        </button>
                                        <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton3" id="goalDropdown">
                                            @if (Model.Goals?.Any() == true)
                                            {
                                                foreach (var g in Model.Goals)
                                                {
                                                    <li style="padding-left: 15px;">
                                                        <div class="form-check px-3">
                                                            <input class="fo</div>rm-check-input" type="checkbox" value="@g.GoalId" id="goal-@g.GoalId">
                                                            <label class="form-check-label" for="goal-@g.GoalId">@g.endGoalDate.ToString("MM/dd/yyyy") - @g.targetWeight Ibs</label>
                                                        </div>
                                                    </li>
                                                }
                                            }
                                            else
                                            {
                                                <li class="px-3">No Goals Available</li>
                                            }
                                        </ul>
                                    </div>
                                </div>

                                <div class="col-md-6">
                                    <div class="dropdown">
                                        <button class="btn btn-secondary dropdown-toggle w-100" type="button" id="dropdownMenuButton4" data-bs-toggle="dropdown" aria-expanded="false">
                                            Chats
                                        </button>
                                        <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton4" id="chatDropdown">

                                            @if (Model.Chats?.Any() == true)
                                            {
                                                foreach (var c in Model.Chats)
                                                {
                                                    <li style="padding-left: 15px;">
                                                        <div class="form-check px-3">
                                                            <input class="form-check-input" type="checkbox" value="@c.Id" id="chat-@c.Id">
                                                            <label class="form-check-label" for="chat-@c.Id">@c.ChatDate</label>
                                                        </div>
                                                    </li>
                                                }
                                            }
                                            else
                                            {
                                                <li class="px-3">No Chats Available</li>
                                            }

                                        </ul>
                                    </div>
                                </div>
                            </div>

                            <div>
                                <div class="content-box">
                                    <textarea class="form-control" id="description" placeholder="Please enter Summary for your Journal."></textarea>
                                </div>
                            </div>

                        </form>
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-outline-danger" data-bs-dismiss="modal">Close</button>
                        <button id="createJournalButton" type="button" class="btn btn-success">Create Journal</button>
                    </div>

                </div>
            </div>
        </div>
    
        <div class="modal fade" id="pdfModal" tabindex="-1">
        <div class="modal-dialog modal-xl">
            <div class="modal-content" id="modal-content-pdf">
            <div class="modal-header">
                <h4 class="modal-title" id="modal-journalpdf-title" style="text-align: center;">Journal Title</h4>
                <span class="ms-3" id="modal-journalpdf-email">@Model.Email</span>
                <span class="ms-3">Date: 28th May</span>
                <span class="ms-3">@Model.FirstName @Model.LastName</span>
                <span class="ms-3">@Model.Age</span>
                <h1>@Model.FirstName</h1>
                <span class="ms-3">Weight:: Start: 230, End: 200</span>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="modal-body-pdf" style="font-size: .25rem; font-family: 'Times New Roman', serif;">
                <ul id="modal-journalpdf-top-title" style="margin-left: -30px;"></ul>

                <h4 style="font-size: .45rem; color: #dd1e1e; font-family: 'Helvetica Neue', sans-serif; text-transform: uppercase; letter-spacing: 1px; border-bottom: 1px solid #e0e0e0; padding-bottom: 3px; margin-top: 10px;">Blood-Tests</h4>
                <ul id="modal-journalpdf-bloodtests"></ul>

                <h4 style="font-size: .45rem; color: #bf04b2; font-family: 'Helvetica Neue', sans-serif; text-transform: uppercase; letter-spacing: 1px; border-bottom: 1px solid #e0e0e0; padding-bottom: 3px; margin-top: 10px;">Goals</h4>
                <ul id="modal-journalpdf-goals"></ul>

                <h4 style="font-size: .45rem; color: #3498db; font-family: 'Helvetica Neue', sans-serif; text-transform: uppercase; letter-spacing: 1px; border-bottom: 1px solid #e0e0e0; padding-bottom: 3px; margin-top: 10px;">Workouts</h4>
                <ul id="modal-journalpdf-workouts"></ul>

                <h4 style="font-size: .45rem; color: #16a085; font-family: 'Helvetica Neue', sans-serif; text-transform: uppercase; letter-spacing: 1px; border-bottom: 1px solid #e0e0e0; padding-bottom: 3px; margin-top: 10px;">Summary</h4>
                <div id="modal-journalpdf-content">

                <p id="modal-journalpdf-summary"></p>
                            
                </div>

            </div>
            <div class="text-end"></div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary">Save changes</button>
            </div>
            </div>
        </div>
        </div>
    </section>  

<script>
    const pdfModal = new bootstrap.Modal(document.getElementById('pdfModal'), {
        keyboard: false
    });

    const journalModel = new bootstrap.Modal(document.getElementById('createJournalModal'), {
        keyboard: false
    });

    const showJournalModal = new bootstrap.Modal(document.getElementById('showJournalModal'), {
        keyboard: false
    });

    function showPdfModal() {
        showJournalModal.hide();
        pdfModal.show();
    }

    function showJournalModel() {
        journalModel.show();
    }

    function getSelectedOptions(dropdownId) {
        const dropdown = document.getElementById(dropdownId);
        const checkboxes = dropdown.querySelectorAll('input[type="checkbox"]:checked');
        return Array.from(checkboxes).map(cb => cb.value);
    }

    function convertHTMLtoPDF(data) {
        let pdfjs = document.querySelector('#modal-body-pdf');
    
        let opt = {
            margin: 10,
            filename: `${data.lastName}-${data.firstName}-Journal${data.id}.pdf`,
            image: { type: 'jpeg', quality: 0.98 },
            html2canvas: { scale: 2, logging: true, dpi: 192, letterRendering: true },
            jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' }
        };

        pdfjs.style.fontSize = '0.75rem';  
        
        let h4Elements = pdfjs.querySelectorAll('h4');
        h4Elements.forEach(h4 => {
            h4.style.fontSize = '1rem';  
        });
    
        html2pdf().set(opt).from(pdfjs).save();

        setTimeout(() => {
            pdfjs.style.fontSize = '0.25rem';
            h4Elements.forEach(h4 => {
                h4.style.fontSize = '0.45rem';
            });
        }, 1000);
    }

 /* function convertHTMLtoPDF(data) {
        const { jsPDF } = window.jspdf;

        let doc = new jsPDF('p', 'mm', 'a4');
        let pdfjs = document.querySelector('#modal-body-pdf');


        doc.setFontSize(12); 

        doc.html(pdfjs, {
            callback: function (doc) {
                doc.save(`${data.lastName}-${data.firstName}-Journal${data.id}.pdf`);
            },
            x: 10, 
            y: 10, 
            width: 190, 
            windowWidth: 794 
        });
    } */

    function viewJournalDetails(journalId) {

    fetch(`/api/JournalController/GetJournalDetails?journalId=${journalId}`)
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            document.getElementById('modal-journal-content').innerText = data.content;
            document.getElementById('modal-journal-title').innerText = data.title;
            document.getElementById('modal-journal-date').innerText = data.journalDate;
            document.getElementById('modal-journal-workouts').innerHTML = generateWorkoutsHtml(data.workouts);
            document.getElementById('modal-journal-bloodtests').innerHTML = generateBloodTestsHtml(data.bloodTests);
            document.getElementById('modal-journal-goals').innerHTML = generateGoalsHtml(data.goals);
            document.getElementById('deleteButton').value = journalId;

            showJournalModal.show();
        })
        .catch(error => {
            console.error('Error fetching journal details:', error);
        });
}

    function generateUserInfo(data) {
        return `<div><strong>${data.lastName}</strong>, <strong>${data.firstName}</strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>Journal: ${data.title}</strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>Age: ${data.age}</strong>, &nbsp;&nbsp;&nbsp;<strong>DOB: ${data.birthday}&nbsp;&nbsp;&nbsp;${data.email}</strong></div>`;
    }

    function generateWorkoutsHtml(workouts) {
        if (workouts.length === 0) return '<p>No workouts available.</p>';

        var ans = [];
        workouts.forEach(function(w) {
            if(w.rep !== 0) {
                ans.push(`<li>${w.type}: ${w.date}, Set: ${w.set}, Rep: ${w.rep}</li>`);
            } else {
                ans.push(`<li>${w.type}: ${w.date}, Duration: ${w.dur} min</li>`);
            }
        });
        return ans.join('');
    }

    function generateWorkoutsHtmlPdf(workouts) {
        if (workouts.length === 0) return '<p>No workouts available.</p>';

        var ans = [];
        workouts.forEach(function(w) {
            if(w.rep !== 0) {
                ans.push(`<li>${w.type}: ${w.date}, Set: ${w.set}, Rep: ${w.rep}</li>`);
            } else {
                ans.push(`<li>${w.type}: ${w.date}, Duration: ${w.dur} min</li>`);
            }
        });
        return ans.join('');
    }

    function generateBloodTestsHtml(bloodTests) {
        if (bloodTests.length === 0) return '<p>No blood tests available.</p>';
        return bloodTests.map(test => `<li>Test Date: ${test.date}</li>`).join('');
    }

    function generateBloodTestsHtmlpdf(bloodTests) {
        if (bloodTests.length === 0) return '<p>No blood tests available.</p>';

        var ans = [];
        bloodTests.forEach(function(g) {
            ans.push(`<div><strong>Submission: ${g.date}</strong></div>`);
            g.tests.forEach(function(t) {
                console.log(t.grade);
                if(t.grade === 0) {
                    ans.push(`<li>${t.testName}, ${t.result} (<strong>LOW</strong>)</li>`);
                } else if (t.grade === 2){
                    ans.push(`<li>${t.testName}: ${t.result} (<strong>HIGH</strong>)</li>`);
                }
            });
            ans.push(`<div style="margin: 10px 0;"></div>`);
        
    });
    return ans.join('');
    }

    function generateGoalsHtml(goals) {

            if (goals.length === 0) return '<p>No goals available.</p>';

            var ans = [];
            goals.forEach(function(g) {
                if(!g.resolved) {
                    ans.push(`<li>Target Weight: ${g.targetWeight} Ibs, End Date: ${g.endDate} (active)</li>`);
                } else {
                    ans.push(`<li>Target Weight: ${g.targetWeight} Ibs, End Date: ${g.endDate} (inactive)</li>`);
                    //Ibs, End Date: ${g.endDate}
                }
            });

            return ans.join('');
        }

    function generateGoalsHtmlPdf(goals) {

            if (goals.length === 0) return '<p>No goals available.</p>';

            var ans = [];
            goals.forEach(function(g) {
                //alert(g.resolved);
                if(!g.resolved) {
                    ans.push(`<li>Target Weight: ${g.targetWeight} Ibs, (active)</li>`);
                } else {
                    ans.push(`<li>Target Weight: ${g.targetWeight} Ibs, (inactive)</li>`);
                    //Ibs, End Date: ${g.endDate}
                }
                    ans.push(`<li>Start Date: ${g.startDate}, End Date: ${g.endDate}</li>`);
                    ans.push(`<li>Description: ${g.description}</li>`);
                    ans.push(`<div style="margin: 10px 0;"></div>`);
            });

            return ans.join('\n');
        }
        
    document.getElementById("createJournalButton").addEventListener("click", function (event) {
        event.preventDefault();

        const selectedBloodtests = getSelectedOptions('bloodtestDropdown');
        const selectedWorkouts = getSelectedOptions('workoutDropdown');
        const selectedGoals = getSelectedOptions('goalDropdown');
        const selectedChats = getSelectedOptions('chatDropdown');

        console.log('Selected Bloodtests:', selectedBloodtests);
        console.log('Selected Workouts:', selectedWorkouts);
        console.log('Selected Goals:', selectedGoals);
        console.log('Selected Chats:', selectedChats);

        const sid = document.getElementById("userSecretId").value;
        const date = new Date().toISOString().split('T')[0];
        const title = document.getElementById("journalTitle").value;
        const content = document.getElementById("description").value;
        const resolved = false;

        if (!content) {
            alert("Description cannot be empty.");
            return;
        }

        if (!title) {
            alert("Title cannot be empty.");
            return;
        }

        if (title.length > 23) {
            alert("Title cannot be more than 23 characters.");
            return;
        }

        const journal = {
            userID: sid,
            journalDate: date,
            title: title,
            content: content,
            resolved: resolved,
            selectedBloodTestIds: selectedBloodtests,
            selectedWorkoutIds: selectedWorkouts,
            selectedGoalIds: selectedGoals,
            selectedChatIds: selectedChats
        };

        console.log('Journal Object:', journal);

        fetch('/api/JournalController/CreateJournal', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(journal),
        })
            .then(response => response.ok ? response.json() : Promise.reject(response.text()))
            .then(data => alert("Journal has been created."))
            .then(data => window.location.reload())
            .catch(response => response.then(errorMessage => alert("Error: " + errorMessage)));
    });

    document.getElementById("deleteButton").addEventListener("click", function (event) {
        event.preventDefault();
            
            if (!confirm("Are you sure you want to delete this journal?")) {
             return; 
            }

            const journalId = document.getElementById(`deleteButton`).value;
            
            fetch('/api/JournalController/DeleteJournal', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ Id: journalId })
        
            })
            .then(response => {
                if(response.ok){
                    window.location.reload();
                }
                return response.ok ? response.json() : Promise.reject(response.text());
            })
            .then(data => alert("Journal has been deleted"))
            .catch(errorMessage => alert("Error: " + errorMessage));
        });

    document.getElementById("generatePdfButton").addEventListener("click", function (event) {
    event.preventDefault();
        if (!confirm("Are you sure you want to get a pdf of this journal?")) {
            return; 
        }

        const journalId = document.getElementById(`deleteButton`).value;
        
        fetch(`/api/JournalController/GetJournalDetailss?journalId=${journalId}`)
        .then(response => {
        if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
        })
        .then(data => {
        document.getElementById('modal-journalpdf-top-title').innerHTML = generateUserInfo(data);
        document.getElementById('generatePdfButton').value = journalId;
        document.getElementById('modal-journalpdf-title').innerText = data.title;
        document.getElementById('modal-journalpdf-workouts').innerHTML = generateWorkoutsHtmlPdf(data.workouts);
        document.getElementById('modal-journalpdf-goals').innerHTML = generateGoalsHtmlPdf(data.goals);
        document.getElementById('modal-journalpdf-bloodtests').innerHTML = generateBloodTestsHtmlpdf(data.bloodTests);
        document.getElementById('modal-journalpdf-summary').innerText = data.content;

        convertHTMLtoPDF(data);
        })
        .catch(error => {
            console.error('Error fetching journal details:', error);
        });

    });

</script>
